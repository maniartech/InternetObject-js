# String Token Test Cases
# Regular strings, open strings, raw strings, and byte strings

regular_strings:
  name: regular_strings
  description: Tests for regular quoted strings
  cases:
    - name: basic_double_quoted
      input: '"Hello World"'
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: Hello World
        token: '"Hello World"'

    - name: basic_single_quoted
      input: "'Hello World'"
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: Hello World
        token: "'Hello World'"

    - name: with_escape_sequences
      input: '"Line 1\nLine 2\tTabbed"'
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: "Line 1\nLine 2\tTabbed"
        token: '"Line 1\\nLine 2\\tTabbed"'

    - name: with_unicode
      input: '"Unicode: \u0041"'
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: "Unicode: A"
        token: '"Unicode: \\u0041"'

    - name: with_byte
      input: '"Byte: \x41"'
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: "Byte: A"
        token: '"Byte: \\x41"'

    - name: with_quotes
      input: '"Escaped: \"quoted\""'
      expected:
        type: STRING
        subType: REGULAR_STRING
        value: 'Escaped: "quoted"'
        token: '"Escaped: \\"quoted\\""'

open_strings:
  name: open_strings
  description: Tests for unquoted strings
  cases:
    - name: simple_identifier
      input: HelloWorld
      expected:
        type: STRING
        subType: OPEN_STRING
        value: HelloWorld
        token: HelloWorld

    - name: with_underscore
      input: Hello_World
      expected:
        type: STRING
        subType: OPEN_STRING
        value: Hello_World
        token: Hello_World

    - name: with_hyphen
      input: Hello-World
      expected:
        type: STRING
        subType: OPEN_STRING
        value: Hello-World
        token: Hello-World

    - name: with_numbers
      input: Hello123
      expected:
        type: STRING
        subType: OPEN_STRING
        value: Hello123
        token: Hello123

raw_strings:
  name: raw_strings
  description: Tests for raw strings (r-prefixed)
  cases:
    - name: with_escapes
      input: 'r"Hello\nWorld"'
      expected:
        type: STRING
        subType: RAW_STRING
        value: "Hello\\nWorld"
        token: 'r"Hello\\nWorld"'

    - name: with_path
      input: "r'C:\\path\\to\\file'"
      expected:
        type: STRING
        subType: RAW_STRING
        value: "C:\\path\\to\\file"
        token: "r'C:\\path\\to\\file'"

    - name: with_quotes
      input: 'r"Raw string with \"quotes\""'
      expected:
        type: STRING
        subType: RAW_STRING
        value: 'Raw string with \"quotes\"'
        token: 'r"Raw string with \\"quotes\\""'

byte_strings:
  name: byte_strings
  description: Tests for byte strings (b-prefixed)
  cases:
    - name: simple_base64
      input: 'b"SGVsbG8gV29ybGQ="'
      expected:
        type: BINARY
        subType: BINARY_STRING
        value:
          type: Buffer
          data: [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]
        token: 'b"SGVsbG8gV29ybGQ="'

    - name: complex_base64
      input: "b'U29tZSBiaW5hcnkgZGF0YQ=='"
      expected:
        type: BINARY
        subType: BINARY_STRING
        value:
          type: Buffer
          data: [83, 111, 109, 101, 32, 98, 105, 110, 97, 114, 121, 32, 100, 97, 116, 97]
        token: "b'U29tZSBiaW5hcnkgZGF0YQ=='"

error_cases:
  name: string_error_cases
  description: Tests that should produce specific errors for string tokens
  cases:
    - name: unterminated_double_quote
      input: '"unterminated string'
      expected_error:
        code: stringNotClosed
        message: String not closed

    - name: unterminated_single_quote
      input: "'unterminated string"
      expected_error:
        code: stringNotClosed
        message: String not closed

    - name: invalid_escape_sequence
      input: '"invalid \k escape"'
      expected_error:
        code: invalidEscapeSequence
        message: Invalid escape sequence

    - name: unterminated_hex_escape
      input: '"incomplete \u12"'
      expected_error:
        code: invalidEscapeSequence
        message: Invalid escape sequence

    - name: invalid_hex_escape
      input: '"invalid \u12XY"'
      expected_error:
        code: invalidEscapeSequence
        message: Invalid escape sequence

    - name: unterminated_byte_escape
      input: '"incomplete \x1"'
      expected_error:
        code: invalidEscapeSequence
        message: Invalid escape sequence

    - name: invalid_byte_escape
      input: '"invalid \xXY"'
      expected_error:
        code: invalidEscapeSequence
        message: Invalid escape sequence

    - name: invalid_raw_string_annotation
      input: 'rx"raw string"'
      expected_error:
        code: unsupportedAnnotation
        message: Unsupported string annotation

    - name: unterminated_raw_string
      input: 'r"unterminated raw string'
      expected_error:
        code: stringNotClosed
        message: String not closed

    - name: invalid_byte_string_annotation
      input: 'bx"byte string"'
      expected_error:
        code: unsupportedAnnotation
        message: Unsupported string annotation

    - name: unterminated_byte_string
      input: 'b"unterminated byte string'
      expected_error:
        code: stringNotClosed
        message: String not closed

    - name: invalid_base64_byte_string
      input: 'b"invalid base64!@#"'
      expected_error:
        code: invalidBase64
        message: Invalid base64 encoding

    - name: invalid_unicode_in_string
      input: '"invalid \uD800"'
      expected_error:
        code: invalidUnicode
        message: Invalid Unicode character

    - name: invalid_control_char_in_string
      input: '"invalid \u0007"'
      expected_error:
        code: invalidCharacter
        message: Invalid control character in string

    - name: invalid_whitespace_in_string
      input: '"invalid\u0000"'
      expected_error:
        code: invalidCharacter
        message: Invalid character in string

    - name: invalid_string_concatenation
      input: '"string1" "string2"'
      expected_error:
        code: invalidStringConcatenation
        message: Invalid string concatenation

    - name: invalid_string_interpolation
      input: '"string ${invalid}"'
      expected_error:
        code: invalidStringInterpolation
        message: Invalid string interpolation

    - name: invalid_string_annotation
      input: 'invalid"string"'
      expected_error:
        code: invalidStringAnnotation
        message: Invalid string annotation

    - name: invalid_string_quote_mismatch
      input: '"string\''
      expected_error:
        code: stringQuoteMismatch
        message: String quote mismatch

    - name: invalid_string_escape_at_end
      input: '"string\\"'
      expected_error:
        code: invalidEscapeAtEnd
        message: Invalid escape sequence at end of string

    - name: invalid_string_unicode_escape
      input: '"\\u"'
      expected_error:
        code: invalidUnicodeEscape
        message: Invalid Unicode escape sequence

    - name: invalid_string_byte_escape
      input: '"\\x"'
      expected_error:
        code: invalidByteEscape
        message: Invalid byte escape sequence