# Internet Object Tokenizer Test Cases
# Format: test_name: input -> expected_tokens
# Each test case is separated by ---
# Comments starting with # are ignored
# Expected tokens are in JSON format for easy parsing

# Basic String Tests
---
name: basic_strings
description: Basic string literal tests
input: |
  "Hello World"
  'Hello World'
  "Line 1\nLine 2"
  "Unicode: \u0041"
  "Byte: \x41"
  "Escaped: \"quoted\""
expected: [
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Hello World", "token": "\"Hello World\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Hello World", "token": "'Hello World'"},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Line 1\nLine 2", "token": "\"Line 1\\nLine 2\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Unicode: A", "token": "\"Unicode: \\u0041\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Byte: A", "token": "\"Byte: \\x41\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Escaped: \"quoted\"", "token": "\"Escaped: \\\"quoted\\\"\""}
]

# Open String Tests
---
name: open_strings
description: Tests for unquoted strings
input: |
  HelloWorld
  Hello_World
  Hello-World
  Hello123
  true
  false
  null
  Inf
  NaN
expected: [
  {"type": "STRING", "subType": "OPEN_STRING", "value": "HelloWorld", "token": "HelloWorld"},
  {"type": "STRING", "subType": "OPEN_STRING", "value": "Hello_World", "token": "Hello_World"},
  {"type": "STRING", "subType": "OPEN_STRING", "value": "Hello-World", "token": "Hello-World"},
  {"type": "STRING", "subType": "OPEN_STRING", "value": "Hello123", "token": "Hello123"},
  {"type": "BOOLEAN", "value": true, "token": "true"},
  {"type": "BOOLEAN", "value": false, "token": "false"},
  {"type": "NULL", "value": null, "token": "null"},
  {"type": "NUMBER", "value": Infinity, "token": "Inf"},
  {"type": "NUMBER", "value": NaN, "token": "NaN"}
]

# Raw String Tests
---
name: raw_strings
description: Tests for raw strings (r-prefixed)
input: |
  r"Hello\nWorld"
  r'C:\path\to\file'
  r"Raw string with \"quotes\""
expected: [
  {"type": "STRING", "subType": "RAW_STRING", "value": "Hello\\nWorld", "token": "r\"Hello\\nWorld\""},
  {"type": "STRING", "subType": "RAW_STRING", "value": "C:\\path\\to\\file", "token": "r'C:\\path\\to\\file'"},
  {"type": "STRING", "subType": "RAW_STRING", "value": "Raw string with \\\"quotes\\\"", "token": "r\"Raw string with \\\"quotes\\\"\""}
]

# Byte String Tests
---
name: byte_strings
description: Tests for byte strings (b-prefixed)
input: |
  b"SGVsbG8gV29ybGQ="
  b'U29tZSBiaW5hcnkgZGF0YQ=='
expected: [
  {"type": "BINARY", "subType": "BINARY_STRING", "value": {"type": "Buffer", "data": [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]}, "token": "b\"SGVsbG8gV29ybGQ=\""},
  {"type": "BINARY", "subType": "BINARY_STRING", "value": {"type": "Buffer", "data": [83, 111, 109, 101, 32, 98, 105, 110, 97, 114, 121, 32, 100, 97, 116, 97]}, "token": "b'U29tZSBiaW5hcnkgZGF0YQ=='"}
]

# DateTime String Tests
---
name: datetime_strings
description: Tests for datetime strings
input: |
  d"2024-03-20"
  t"14:30:00"
  dt"2024-03-20T14:30:00"
expected: [
  {"type": "DATETIME", "subType": "DATE", "value": "2024-03-20T00:00:00.000Z", "token": "d\"2024-03-20\""},
  {"type": "DATETIME", "subType": "TIME", "value": "1970-01-01T14:30:00.000Z", "token": "t\"14:30:00\""},
  {"type": "DATETIME", "subType": "DATETIME", "value": "2024-03-20T14:30:00.000Z", "token": "dt\"2024-03-20T14:30:00\""}
]

# Number Tests
---
name: number_literals
description: Tests for various number formats
input: |
  123
  -123
  123.456
  1.23e10
  1.23E-10
  Inf
  -Inf
  NaN
  0xFF
  0o77
  0b1010
  123n
  123.456m
expected: [
  {"type": "NUMBER", "value": 123, "token": "123"},
  {"type": "NUMBER", "value": -123, "token": "-123"},
  {"type": "NUMBER", "value": 123.456, "token": "123.456"},
  {"type": "NUMBER", "value": 1.23e10, "token": "1.23e10"},
  {"type": "NUMBER", "value": 1.23e-10, "token": "1.23E-10"},
  {"type": "NUMBER", "value": Infinity, "token": "Inf"},
  {"type": "NUMBER", "value": -Infinity, "token": "-Inf"},
  {"type": "NUMBER", "value": NaN, "token": "NaN"},
  {"type": "NUMBER", "subType": "HEX", "value": 255, "token": "0xFF"},
  {"type": "NUMBER", "subType": "OCTAL", "value": 63, "token": "0o77"},
  {"type": "NUMBER", "subType": "BINARY", "value": 10, "token": "0b1010"},
  {"type": "BIGINT", "value": "123", "token": "123n"},
  {"type": "DECIMAL", "value": "123.456", "token": "123.456m"}
]

# Special Symbol Tests
---
name: special_symbols
description: Tests for special symbols and operators
input: |
  { } [ ] ( ) , : = + - * / % < > ! & | ^ ~
expected: [
  {"type": "LBRACE", "value": "{", "token": "{"},
  {"type": "RBRACE", "value": "}", "token": "}"},
  {"type": "LBRACKET", "value": "[", "token": "["},
  {"type": "RBRACKET", "value": "]", "token": "]"},
  {"type": "LPAREN", "value": "(", "token": "("},
  {"type": "RPAREN", "value": ")", "token": ")"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "EQUALS", "value": "=", "token": "="},
  {"type": "PLUS", "value": "+", "token": "+"},
  {"type": "MINUS", "value": "-", "token": "-"},
  {"type": "MULTIPLY", "value": "*", "token": "*"},
  {"type": "DIVIDE", "value": "/", "token": "/"},
  {"type": "MODULO", "value": "%", "token": "%"},
  {"type": "LT", "value": "<", "token": "<"},
  {"type": "GT", "value": ">", "token": ">"},
  {"type": "NOT", "value": "!", "token": "!"},
  {"type": "AND", "value": "&", "token": "&"},
  {"type": "OR", "value": "|", "token": "|"},
  {"type": "XOR", "value": "^", "token": "^"},
  {"type": "BITNOT", "value": "~", "token": "~"}
]

# Section Tests
---
name: section_tests
description: Tests for section separators and schemas
input: |
  ---
  --- name: $schema
  --- $schema
expected: [
  {"type": "SECTION_SEP", "value": "---", "token": "---"},
  {"type": "SECTION_SEP", "value": "---", "token": "---"},
  {"type": "STRING", "subType": "SECTION_NAME", "value": "name", "token": "name"},
  {"type": "STRING", "subType": "SECTION_SCHEMA", "value": "$schema", "token": "$schema"},
  {"type": "SECTION_SEP", "value": "---", "token": "---"},
  {"type": "STRING", "subType": "SECTION_SCHEMA", "value": "$schema", "token": "$schema"}
]

# Whitespace and Comment Tests
---
name: whitespace_comments
description: Tests for whitespace and comment handling
input: |
  # This is a comment
  "Hello" # Inline comment
  "Multi
  line
  string"
  "  spaces  "
expected: [
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Hello", "token": "\"Hello\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "Multi\nline\nstring", "token": "\"Multi\nline\nstring\""},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "  spaces  ", "token": "\"  spaces  \""}
]

# Error Cases
---
name: error_cases
description: Tests that should produce specific errors
input: |
  "Unclosed string
  "Invalid \u123"
  "Invalid \x1"
  b"Invalid base64!"
  d"Invalid date"
  t"Invalid time"
  dt"Invalid datetime"
expected_errors: [
  {"code": "stringNotClosed", "message": "String not closed"},
  {"code": "invalidEscapeSequence", "message": "Invalid Unicode escape sequence"},
  {"code": "invalidEscapeSequence", "message": "Invalid byte escape sequence"},
  {"code": "invalidBase64", "message": "Invalid base64 string"},
  {"code": "invalidDateTime", "message": "Invalid date format"},
  {"code": "invalidDateTime", "message": "Invalid time format"},
  {"code": "invalidDateTime", "message": "Invalid datetime format"}
]

# Complex Combination Tests
---
name: complex_combinations
description: Tests combining multiple token types
input: |
  {
    "string": "value",
    "number": 123,
    "boolean": true,
    "null": null,
    "array": [1, 2, 3],
    "object": {
      "nested": "value"
    }
  }
expected: [
  {"type": "LBRACE", "value": "{", "token": "{"},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "string", "token": "\"string\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "value", "token": "\"value\""},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "number", "token": "\"number\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "NUMBER", "value": 123, "token": "123"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "boolean", "token": "\"boolean\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "BOOLEAN", "value": true, "token": "true"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "null", "token": "\"null\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "NULL", "value": null, "token": "null"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "array", "token": "\"array\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "LBRACKET", "value": "[", "token": "["},
  {"type": "NUMBER", "value": 1, "token": "1"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "NUMBER", "value": 2, "token": "2"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "NUMBER", "value": 3, "token": "3"},
  {"type": "RBRACKET", "value": "]", "token": "]"},
  {"type": "COMMA", "value": ",", "token": ","},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "object", "token": "\"object\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "LBRACE", "value": "{", "token": "{"},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "nested", "token": "\"nested\""},
  {"type": "COLON", "value": ":", "token": ":"},
  {"type": "STRING", "subType": "REGULAR_STRING", "value": "value", "token": "\"value\""},
  {"type": "RBRACE", "value": "}", "token": "}"},
  {"type": "RBRACE", "value": "}", "token": "}"}
]
